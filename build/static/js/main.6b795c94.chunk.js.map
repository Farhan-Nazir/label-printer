{"version":3,"sources":["component/printRmaLabel.js","component/rmaForm.js","App.js","serviceWorker.js","index.js"],"names":["PrintRmaLabel","Paper","style","textAlign","width","height","marginLeft","marginTop","this","props","RMAID","SerialNumber","ProdUnit","Country","size","value","Component","RmaForm","state","scanUnit","rmaID","isTrue","unitData","handleOnChange","e","unit","target","setState","res","split","handleOnChangeRmaID","length","handleOnReset","display","Typography","variant","component","TextField","id","required","label","type","name","margin","onChange","autoFocus","fullWidth","Button","color","onClick","autoComplete","InputLabelProps","shrink","copyStyles","trigger","disabled","content","componentRef","ref","el","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b795c94.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Paper } from '@material-ui/core';\r\nimport QRCode from \"qrcode.react\";\r\n\r\nclass PrintRmaLabel extends Component {\r\n    render() {\r\n        return (\r\n            <Paper style={{ textAlign: \"center\", width: \"600px\", height: \"500px\", marginLeft: \"5px\" }}>\r\n                <div style={{ marginTop: \"20px\" }}>\r\n                    <h2>RMA Case Detail</h2>\r\n                    <h3>RMA ID: {this.props.RMAID}</h3>\r\n                    <h3>Serial # {this.props.SerialNumber} </h3>\r\n                    <h3>Prod-Unit: {this.props.ProdUnit}</h3>\r\n                    <h3>C.O.O: {this.props.Country}</h3>\r\n                    <br />\r\n                    <QRCode size={84} value={`rma${this.props.RMAID}`} />\r\n                </div>\r\n            </Paper>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default PrintRmaLabel;\r\n\r\n//ref={el => (this.componentRef = el)}","import React, { Component } from 'react';\r\nimport { TextField, Typography, Button, Paper } from '@material-ui/core';\r\nimport PrintRmaLabel from './printRmaLabel';\r\nimport ReactToPrint from \"react-to-print\";\r\nclass RmaForm extends Component {\r\n\r\n    state = {\r\n        scanUnit: \"\",\r\n        rmaID: \"\",\r\n        isTrue: true,\r\n        unitData: []\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        let unit = e.target.value;\r\n        this.setState({ scanUnit: unit });\r\n        let res = unit.split(',');\r\n        this.setState({ unitData: [...res] })\r\n    }\r\n\r\n    \r\n    handleOnChangeRmaID = e => {\r\n        this.setState({ rmaID: e.target.value })\r\n        this.state.rmaID.length > 0 ? this.setState({ isTrue: false}) : this.setState({ isTrue: true})\r\n    }\r\n\r\n    handleOnReset = () => this.setState({ scanUnit: \"\", unitData: [\"\", \"\", \"\", \"\", \"\"], rmaID: \"\" })\r\n    render() {\r\n        const { unitData } = this.state;\r\n        return (\r\n            <div style={{ textAlign: \"center\", marginTop: \"15px\", marginLeft: \"50px\", display: \"flex\" }}>\r\n                <Paper style={{ width: \"600px\" }}>\r\n                    <Typography variant=\"h3\" component=\"h3\">\r\n                        RMA Label Print Tool.\r\n        </Typography>\r\n                    <Typography variant=\"subtitle1\" component=\"h5\">\r\n                        Please scan a unit to print the label.\r\n        </Typography>\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        required\r\n                        label=\"Scan a unit\"\r\n                        type=\"text\"\r\n                        name=\"scanUnit\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.handleOnChange}\r\n                        value={this.state.scanUnit}\r\n                        autoFocus={true}\r\n                        fullWidth\r\n                    /><br />\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleOnReset}>\r\n                        Reset\r\n      </Button>\r\n                </Paper>\r\n                <Paper style={{ width: \"400px\", height: \"500px\", marginLeft: \"5px\" }}>\r\n                    <TextField\r\n                        required\r\n                        id=\"outlined-email-input\"\r\n                        label=\"Serial Number\"\r\n                        type=\"text\"\r\n                        name=\"serial\"\r\n                        autoComplete=\"serial-number\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.handleOnChange}\r\n                        value={unitData[0]}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        label=\"RMA ID\"\r\n                        type=\"text\"\r\n                        name=\"rma-id\"\r\n                        autoComplete=\"rma-id\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.rmaID}\r\n                        onChange={this.handleOnChangeRmaID}\r\n                        required\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        required\r\n                        id=\"outlined-email-input\"\r\n                        label=\"Prod Unit\"\r\n                        type=\"text\"\r\n                        name=\"prod-unit\"\r\n                        autoComplete=\"prod-unit\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        value={unitData[1]}\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        label=\"C.O.O\"\r\n                        type=\"text\"\r\n                        name=\"country\"\r\n                        autoComplete=\"country\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={unitData[4]}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                    />\r\n                    <br />\r\n                    <ReactToPrint\r\n                        copyStyles={false}\r\n                        trigger={() => <Button variant=\"contained\" disabled={this.state.isTrue} color=\"primary\">\r\n                        Print\r\n            </Button>}\r\n                        content={() => this.componentRef}\r\n                    />\r\n\r\n                </Paper>\r\n\r\n                <PrintRmaLabel ref={el => (this.componentRef = el)} RMAID={this.state.rmaID} SerialNumber={unitData[0]} ProdUnit={unitData[1]} Country={unitData[4]} />\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default RmaForm;","import React from 'react';\r\nimport RmaForm from './component/rmaForm';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (<div> <RmaForm /> </div>);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}