{"version":3,"sources":["component/printRmaLabel.js","component/rmaForm.js","App.js","serviceWorker.js","index.js"],"names":["PrintRmaLabel","style","display","paddingLeft","this","props","RMAID","SerialNumber","ProdUnit","Country","size","value","Component","RmaForm","state","scanUnit","rmaID","isTrue","unitData","handleOnChange","e","unit","target","setState","res","split","handleOnChangeRmaID","length","handleOnReset","textAlign","marginTop","marginLeft","Paper","width","Typography","variant","component","TextField","id","required","label","type","name","margin","onChange","autoFocus","fullWidth","Button","color","onClick","height","autoComplete","InputLabelProps","shrink","copyStyles","trigger","disabled","content","componentRef","ref","el","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAwBeA,E,iLAnBP,OACI,yBAAKC,MAAO,CAAEC,QAAS,SACnB,yBAAKD,MAAO,CAAEE,YAAa,SACvB,uCAAaC,KAAKC,MAAMC,MAAM,6BAA9B,YACcF,KAAKC,MAAME,aADzB,IACuC,6BADvC,cAEgBH,KAAKC,MAAMG,SAAS,6BAFpC,UAGYJ,KAAKC,MAAMI,UAE3B,yBAAKR,MAAO,CAAEE,YAAa,SACvB,kBAAC,IAAD,CAAQO,KAAM,GAAIC,MAAO,MAAQP,KAAKC,MAAMC,c,GAXpCM,a,iBCmIbC,E,2MAhIXC,MAAQ,CACJC,SAAU,GACVC,MAAO,GACPC,QAAQ,EACRC,SAAU,I,EAGdC,eAAiB,SAACC,GACd,IAAIC,EAAOD,EAAEE,OAAOX,MACpB,EAAKY,SAAS,CAAER,SAAUM,IAC1B,IAAIG,EAAMH,EAAKI,MAAM,KACrB,EAAKF,SAAS,CAAEL,SAAS,YAAKM,M,EAIlCE,oBAAsB,SAAAN,GAClB,EAAKG,SAAS,CAAEP,MAAOI,EAAEE,OAAOX,QAChC,EAAKG,MAAME,MAAMW,OAAS,EAAI,EAAKJ,SAAS,CAAEN,QAAQ,IAAU,EAAKM,SAAS,CAAEN,QAAQ,K,EAG5FW,cAAgB,kBAAM,EAAKL,SAAS,CAAER,SAAU,GAAIG,SAAU,CAAC,GAAI,GAAI,GAAI,GAAI,IAAKF,MAAO,GAAIC,QAAQ,K,wEAC7F,IAAD,OACGC,EAAad,KAAKU,MAAlBI,SACR,OACI,yBAAKjB,MAAO,CAAE4B,UAAW,SAAUC,UAAW,OAAQC,WAAY,OAAQ7B,QAAS,SAC/E,kBAAC8B,EAAA,EAAD,CAAO/B,MAAO,CAAEgC,MAAO,UACnB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,yBAGA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,YAAYC,UAAU,MAA1C,0CAGA,kBAACC,EAAA,EAAD,CACIC,GAAG,uBACHC,UAAQ,EACRC,MAAM,cACNC,KAAK,OACLC,KAAK,WACLC,OAAO,SACPR,QAAQ,WACRS,SAAUxC,KAAKe,eACfR,MAAOP,KAAKU,MAAMC,SAClB8B,WAAW,EACXC,WAAS,IACX,6BACF,kBAACC,EAAA,EAAD,CAAQZ,QAAQ,YAAYa,MAAM,YAAYC,QAAS7C,KAAKwB,eAA5D,UAIJ,kBAACI,EAAA,EAAD,CAAO/B,MAAO,CAAEgC,MAAO,QAASiB,OAAQ,QAASnB,WAAY,QACzD,kBAACM,EAAA,EAAD,CACIE,UAAQ,EACRD,GAAG,uBACHE,MAAM,gBACNC,KAAK,OACLC,KAAK,SACLS,aAAa,gBACbR,OAAO,SACPR,QAAQ,WACRS,SAAUxC,KAAKe,eACfR,MAAOO,EAAS,GAChBkC,gBAAiB,CACbC,QAAQ,KAIhB,6BACA,kBAAChB,EAAA,EAAD,CACIC,GAAG,uBACHE,MAAM,SACNC,KAAK,OACLC,KAAK,SACLS,aAAa,SACbR,OAAO,SACPR,QAAQ,WACRxB,MAAOP,KAAKU,MAAME,MAClB4B,SAAUxC,KAAKsB,oBACfa,UAAQ,IAEZ,6BACA,kBAACF,EAAA,EAAD,CACIE,UAAQ,EACRD,GAAG,uBACHE,MAAM,YACNC,KAAK,OACLC,KAAK,YACLS,aAAa,YACbR,OAAO,SACPR,QAAQ,WACRiB,gBAAiB,CACbC,QAAQ,GAEZ1C,MAAOO,EAAS,KAEpB,6BACA,kBAACmB,EAAA,EAAD,CACIC,GAAG,uBACHE,MAAM,QACNC,KAAK,OACLC,KAAK,UACLS,aAAa,UACbR,OAAO,SACPR,QAAQ,WACRxB,MAAOO,EAAS,GAChBkC,gBAAiB,CACbC,QAAQ,GAEZd,UAAQ,IAEZ,6BACA,kBAAC,IAAD,CACIe,YAAY,EACZC,QAAS,kBAAM,kBAACR,EAAA,EAAD,CAAQZ,QAAQ,YAAYqB,SAAU,EAAK1C,MAAMG,OAAQ+B,MAAM,WAA/D,UAGfS,QAAS,kBAAM,EAAKC,iBAK5B,kBAAC,EAAD,CAAeC,IAAK,SAAAC,GAAE,OAAK,EAAKF,aAAeE,GAAKtD,MAAOF,KAAKU,MAAME,MAAOT,aAAcW,EAAS,GAAIV,SAAUU,EAAS,GAAIT,QAASS,EAAS,U,GA1H3IN,a,MCIPiD,MAJf,WACE,OAAQ,iCAAM,kBAAC,EAAD,MAAN,MCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ba8576a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport QRCode from \"qrcode.react\";\r\n\r\nclass PrintRmaLabel extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ display: \"flex\" }}>\r\n                <div style={{ paddingLeft: \"15px\" }}>\r\n                    <h3>RMA ID: {this.props.RMAID}<br />\r\n                        Serial # {this.props.SerialNumber} <br />\r\n                        Prod-Unit: {this.props.ProdUnit}<br />\r\n                        C.O.O: {this.props.Country}</h3>\r\n                </div>\r\n                <div style={{ paddingLeft: \"20px\" }}>\r\n                    <QRCode size={84} value={\"rma\" + this.props.RMAID} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default PrintRmaLabel;\r\n\r\n//ref={el => (this.componentRef = el)}","import React, { Component } from 'react';\r\nimport { TextField, Typography, Button, Paper } from '@material-ui/core';\r\nimport PrintRmaLabel from './printRmaLabel';\r\nimport ReactToPrint from \"react-to-print\";\r\nclass RmaForm extends Component {\r\n\r\n    state = {\r\n        scanUnit: \"\",\r\n        rmaID: \"\",\r\n        isTrue: true,\r\n        unitData: []\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        let unit = e.target.value;\r\n        this.setState({ scanUnit: unit });\r\n        let res = unit.split(',');\r\n        this.setState({ unitData: [...res] })\r\n    }\r\n\r\n    \r\n    handleOnChangeRmaID = e => {\r\n        this.setState({ rmaID: e.target.value })\r\n        this.state.rmaID.length > 0 ? this.setState({ isTrue: false}) : this.setState({ isTrue: true})\r\n    }\r\n\r\n    handleOnReset = () => this.setState({ scanUnit: \"\", unitData: [\"\", \"\", \"\", \"\", \"\"], rmaID: \"\", isTrue: true })\r\n    render() {\r\n        const { unitData } = this.state;\r\n        return (\r\n            <div style={{ textAlign: \"center\", marginTop: \"15px\", marginLeft: \"50px\", display: \"flex\" }}>\r\n                <Paper style={{ width: \"600px\" }}>\r\n                    <Typography variant=\"h3\" component=\"h3\">\r\n                        RMA Label Print Tool.\r\n        </Typography>\r\n                    <Typography variant=\"subtitle1\" component=\"h5\">\r\n                        Please scan a unit to print the label.\r\n        </Typography>\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        required\r\n                        label=\"Scan a unit\"\r\n                        type=\"text\"\r\n                        name=\"scanUnit\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.handleOnChange}\r\n                        value={this.state.scanUnit}\r\n                        autoFocus={true}\r\n                        fullWidth\r\n                    /><br />\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleOnReset}>\r\n                        Reset\r\n      </Button>\r\n                </Paper>\r\n                <Paper style={{ width: \"400px\", height: \"500px\", marginLeft: \"5px\" }}>\r\n                    <TextField\r\n                        required\r\n                        id=\"outlined-email-input\"\r\n                        label=\"Serial Number\"\r\n                        type=\"text\"\r\n                        name=\"serial\"\r\n                        autoComplete=\"serial-number\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.handleOnChange}\r\n                        value={unitData[0]}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        label=\"RMA ID\"\r\n                        type=\"text\"\r\n                        name=\"rma-id\"\r\n                        autoComplete=\"rma-id\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={this.state.rmaID}\r\n                        onChange={this.handleOnChangeRmaID}\r\n                        required\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        required\r\n                        id=\"outlined-email-input\"\r\n                        label=\"Prod Unit\"\r\n                        type=\"text\"\r\n                        name=\"prod-unit\"\r\n                        autoComplete=\"prod-unit\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        value={unitData[1]}\r\n                    />\r\n                    < br />\r\n                    <TextField\r\n                        id=\"outlined-email-input\"\r\n                        label=\"C.O.O\"\r\n                        type=\"text\"\r\n                        name=\"country\"\r\n                        autoComplete=\"country\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        value={unitData[4]}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                        required\r\n                    />\r\n                    <br />\r\n                    <ReactToPrint\r\n                        copyStyles={false}\r\n                        trigger={() => <Button variant=\"contained\" disabled={this.state.isTrue} color=\"primary\">\r\n                        Print\r\n            </Button>}\r\n                        content={() => this.componentRef}\r\n                    />\r\n\r\n                </Paper>\r\n\r\n                <PrintRmaLabel ref={el => (this.componentRef = el)} RMAID={this.state.rmaID} SerialNumber={unitData[0]} ProdUnit={unitData[1]} Country={unitData[4]} />\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default RmaForm;","import React from 'react';\r\nimport RmaForm from './component/rmaForm';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (<div> <RmaForm /> </div>);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}